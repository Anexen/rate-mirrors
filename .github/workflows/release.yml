# copied from ripgrep

name: release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Get the release version from the tag
        if: env.RG_VERSION == ''
        run: |
          echo "RG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RG_VERSION }}"

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RG_VERSION }}
          release_name: ${{ env.RG_VERSION }}

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set release upload URL, release version and target platform
        run: |
          echo "RELEASE_UPLOAD_URL=${{ steps.release.outputs.upload_url }}" >> $GITHUB_ENV
          echo "release upload url: $RELEASE_UPLOAD_URL"
          echo "RELEASE_VERSION=${{ env.RG_VERSION }}" >> $GITHUB_ENV
          echo "release version: $RELEASE_VERSION"
          echo "TARGET_PLATFORM=x86_64-unknown-linux-musl" >> $GITHUB_ENV
          echo "target platform: $TARGET_PLATFORM"

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          target: ${{ env.TARGET_PLATFORM }}

      - name: Install musl-tools
        run: sudo apt install musl-tools pkg-config libssl-dev

      - name: Build release binary
        run: cargo build --release --locked "--target=${{ env.TARGET_PLATFORM }}"

      - name: Strip release binary
        run: strip "target/${{ env.TARGET_PLATFORM }}/release/rate_arch_mirrors"

      - name: Build archive
        shell: bash
        run: |
          staging="rate-arch-mirrors-${{ env.RELEASE_VERSION }}-${{ env.TARGET_PLATFORM }}"
          mkdir -p "$staging"

          cp LICENSE "$staging/"
          cp "target/${{ env.TARGET_PLATFORM }}/release/rate_arch_mirrors" "$staging/"

          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

